name: Build and Release Tauri App

on:
  pull_request:
    paths:
      - 'dbbs-faculty-match/**'
      - '.github/workflows/packaging.yml'
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag to build and release'
        required: true

jobs:
  build:
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact-suffix: windows_x64
          - os: macos-latest
            artifact-suffix: macos_arm64
          - os: macos-13
            artifact-suffix: macos_x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: dbbs-faculty-match/package-lock.json

      - name: Install frontend dependencies
        working-directory: dbbs-faculty-match
        run: npm ci

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install DMG tooling (macOS)
        if: runner.os == 'macOS'
        run: brew install create-dmg

      - name: Use short Cargo target dir (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $short = "D:\a\t"
          New-Item -ItemType Directory -Force -Path $short | Out-Null
          "CARGO_TARGET_DIR=$short" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "Using CARGO_TARGET_DIR=$short"

      - name: Ensure NSIS is installed/up to date
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco upgrade nsis -y --no-progress
          $refresh = Join-Path $env:ChocolateyInstall 'bin/RefreshEnv.cmd'
          if (Test-Path $refresh) {
            & $refresh | Out-Null
          }

          $candidateDirs = @()
          if ($env:ProgramFiles) {
            $candidateDirs += (Join-Path $env:ProgramFiles 'NSIS')
          }
          if (${env:ProgramFiles(x86)}) {
            $candidateDirs += (Join-Path ${env:ProgramFiles(x86)} 'NSIS')
          }
          if ($env:ChocolateyInstall) {
            $candidateDirs += Get-ChildItem -Path (Join-Path $env:ChocolateyInstall 'lib') -Directory -Filter 'nsis*' |
              Sort-Object LastWriteTime -Descending |
              ForEach-Object { Join-Path $_.FullName 'tools' }
          }

          foreach ($dir in $candidateDirs | Where-Object { $_ -and (Test-Path $_) }) {
            if (Test-Path (Join-Path $dir 'makensis.exe')) {
              $dir | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              Write-Host "Added $dir to PATH"
              break
            }
          }

      - name: Verify makensis works
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $command = Get-Command makensis -ErrorAction SilentlyContinue
          if (-not $command) {
            $candidates = @()
            if ($env:ProgramFiles) {
              $candidates += (Join-Path $env:ProgramFiles 'NSIS/makensis.exe')
            }
            if (${env:ProgramFiles(x86)}) {
              $candidates += (Join-Path ${env:ProgramFiles(x86)} 'NSIS/makensis.exe')
            }
            if ($env:ChocolateyInstall) {
              $candidates += Get-ChildItem -Path (Join-Path $env:ChocolateyInstall 'lib') -Directory -Filter 'nsis*' |
                Sort-Object LastWriteTime -Descending |
                ForEach-Object { Join-Path $_.FullName 'tools/makensis.exe' }
            }

            foreach ($candidate in $candidates | Where-Object { $_ -and (Test-Path $_) }) {
              $command = Get-Item $candidate
              break
            }
          }

          if (-not $command) {
            throw 'makensis executable not found after installing NSIS'
          }

          $exePath = if ($command -is [System.Management.Automation.CommandInfo]) { $command.Source } else { $command.FullName }
          & $exePath /VERSION



      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: dbbs-faculty-match

  create-release:
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      release-tag: ${{ steps.release-tag.outputs.value }}
    steps:
      - name: Determine release tag
        id: release-tag
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == 'workflow_dispatch' ]]; then
            echo "value=${{ inputs.tag_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "value=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub release
        id: create-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ steps.release-tag.outputs.value }}
        shell: bash
        run: |
          set -euo pipefail

          repo="${{ github.repository }}"
          release_tag="${RELEASE_TAG}"
          release_name="DDBS Reviewer Recommendations v${release_tag}"
          payload=$(jq -n \
            --arg tag "$release_tag" \
            --arg name "$release_name" \
            --arg target "${{ github.sha }}" \
            '{tag_name:$tag, name:$name, target_commitish:$target, draft:false, prerelease:false, body:""}')

          response_file=$(mktemp)
          if gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              "repos/${repo}/releases" \
              --input - \
              >"$response_file" <<<"$payload"; then
            :
          else
            if gh api \
                -H "Accept: application/vnd.github+json" \
                "repos/${repo}/releases/tags/${release_tag}" \
                >"$response_file"; then
              :
            else
              echo "Failed to create or retrieve release for tag ${release_tag}" >&2
              cat "$response_file" >&2 || true
              exit 1
            fi
          fi

          release_id=$(jq -r '.id // empty' "$response_file")
          if [[ -z "$release_id" ]]; then
            echo "Could not determine release id" >&2
            cat "$response_file" >&2 || true
            exit 1
          fi

          rm -f "$response_file"

          echo "id=$release_id" >> "$GITHUB_OUTPUT"

  release:
    needs: create-release
    if: needs.create-release.result == 'success'
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact-suffix: windows_x64
          - os: macos-latest
            artifact-suffix: macos_arm64
          - os: macos-13
            artifact-suffix: macos_x64
    runs-on: ${{ matrix.os }}
    env:
      MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: dbbs-faculty-match/package-lock.json

      - name: Install frontend dependencies
        working-directory: dbbs-faculty-match
        run: npm ci
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install DMG tooling (macOS)
        if: runner.os == 'macOS'
        run: brew install create-dmg

      - name: Read app metadata
        id: metadata
        shell: bash
        working-directory: dbbs-faculty-match
        run: |
          set -euo pipefail
          slug=$(jq -r '.name' package.json)
          version=$(jq -r '.version' src-tauri/tauri.conf.json)
          echo "slug=${slug}" >>"$GITHUB_OUTPUT"
          echo "version=${version}" >>"$GITHUB_OUTPUT"

      - name: Use short Cargo target dir (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $short = "D:\a\t"
          New-Item -ItemType Directory -Force -Path $short | Out-Null
          "CARGO_TARGET_DIR=$short" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "Using CARGO_TARGET_DIR=$short"

      - name: Ensure NSIS is installed/up to date
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco upgrade nsis -y --no-progress
          $refresh = Join-Path $env:ChocolateyInstall 'bin/RefreshEnv.cmd'
          if (Test-Path $refresh) {
            & $refresh | Out-Null
          }

          $candidateDirs = @()
          if ($env:ProgramFiles) {
            $candidateDirs += (Join-Path $env:ProgramFiles 'NSIS')
          }
          if (${env:ProgramFiles(x86)}) {
            $candidateDirs += (Join-Path ${env:ProgramFiles(x86)} 'NSIS')
          }
          if ($env:ChocolateyInstall) {
            $candidateDirs += Get-ChildItem -Path (Join-Path $env:ChocolateyInstall 'lib') -Directory -Filter 'nsis*' |
              Sort-Object LastWriteTime -Descending |
              ForEach-Object { Join-Path $_.FullName 'tools' }
          }

          foreach ($dir in $candidateDirs | Where-Object { $_ -and (Test-Path $_) }) {
            if (Test-Path (Join-Path $dir 'makensis.exe')) {
              $dir | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              Write-Host "Added $dir to PATH"
              break
            }
          }

      - name: Verify makensis works
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $command = Get-Command makensis -ErrorAction SilentlyContinue
          if (-not $command) {
            $candidates = @()
            if ($env:ProgramFiles) {
              $candidates += (Join-Path $env:ProgramFiles 'NSIS/makensis.exe')
            }
            if (${env:ProgramFiles(x86)}) {
              $candidates += (Join-Path ${env:ProgramFiles(x86)} 'NSIS/makensis.exe')
            }
            if ($env:ChocolateyInstall) {
              $candidates += Get-ChildItem -Path (Join-Path $env:ChocolateyInstall 'lib') -Directory -Filter 'nsis*' |
                Sort-Object LastWriteTime -Descending |
                ForEach-Object { Join-Path $_.FullName 'tools/makensis.exe' }
            }

            foreach ($candidate in $candidates | Where-Object { $_ -and (Test-Path $_) }) {
              $command = Get-Item $candidate
              break
            }
          }

          if (-not $command) {
            throw 'makensis executable not found after installing NSIS'
          }

          $exePath = if ($command -is [System.Management.Automation.CommandInfo]) { $command.Source } else { $command.FullName }
          & $exePath /VERSION

      - name: Build Tauri application
        working-directory: dbbs-faculty-match
        run: npm exec -- tauri build --ci
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PRIVATE_KEY_PASSWORD }}

      - name: Import Apple codesigning certificates
        id: import-certs
        if: runner.os == 'macOS' && env.MACOS_CERT_P12 != ''
        uses: apple-actions/import-codesign-certs@v5
        with:
          p12-file-base64:   ${{ secrets.MACOS_CERT_P12 }}
          p12-password:      ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain:          signing_temp

      - name: Export signing keychain path
        if: runner.os == 'macOS' && env.MACOS_CERT_P12 != ''
        env:
          KEYCHAIN_PATH_OUTPUT: ${{ steps.import-certs.outputs.keychain-path }}
          MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
        shell: bash
        run: |
          set -euo pipefail
          keychain_path="${KEYCHAIN_PATH_OUTPUT:-}"
          if [[ -z "$keychain_path" ]]; then
            keychain_path="$HOME/Library/Keychains/signing_temp.keychain-db"
            echo "import-certs output did not include keychain path; assuming $keychain_path" >&2
          fi
          if [[ ! -f "$keychain_path" ]]; then
            echo "Expected signing keychain at $keychain_path not found" >&2
            ls -al "$HOME/Library/Keychains" >&2 || true
            exit 1
          fi

          if [[ -z "${MACOS_CERT_PASSWORD:-}" ]]; then
            echo "MACOS_CERT_PASSWORD secret must be provided to unlock signing keychain" >&2
            exit 1
          fi

          security set-keychain-settings -lut 21600 "$keychain_path"
          security unlock-keychain -p "$MACOS_CERT_PASSWORD" "$keychain_path"
          security set-key-partition-list -S apple-tool:,apple: -s -k "$MACOS_CERT_PASSWORD" "$keychain_path" >/dev/null
          security list-keychains -d user -s "$keychain_path" login.keychain

          echo "Using signing keychain at $keychain_path"
          echo "KEYCHAIN_PATH=$keychain_path" >>"$GITHUB_ENV"

      - name: Show imported signing identities
        if: runner.os == 'macOS' && env.MACOS_CERT_P12 != ''
        shell: bash
        run: |
          set -euo pipefail
          keychain_path="${KEYCHAIN_PATH:-}"
          if [[ -z "$keychain_path" ]]; then
            echo "Keychain path environment variable not available" >&2
            exit 1
          fi
          security list-keychains -d user -s "$keychain_path" login.keychain
          declare -a search_targets=("$keychain_path")
          if [[ "$keychain_path" == *.keychain-db ]]; then
            search_targets+=("${keychain_path%.keychain-db}.keychain")
          fi
          search_targets+=("")

          identities_found=0
          for target in "${search_targets[@]}"; do
            if [[ -n "$target" ]]; then
              echo "Querying signing identities in $target"
              output=$(security find-identity -v -p codesigning "$target" 2>&1 || true)
            else
              echo "Querying signing identities from the default keychain search list"
              output=$(security find-identity -v -p codesigning 2>&1 || true)
            fi
            printf '%s\n' "$output"
            if grep -Eq '^[[:space:]]*[0-9]+\)' <<<"$output"; then
              identities_found=1
              break
            fi
          done

          if [[ $identities_found -eq 0 ]]; then
            echo "No signing identities reported by security find-identity" >&2
          fi

      - name: Resolve codesign identity
        if: runner.os == 'macOS' && env.MACOS_CERT_P12 != ''
        env:
          PROVIDED_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
        shell: bash
        run: |
          set -euo pipefail
          keychain_path="${KEYCHAIN_PATH:-}"
          if [[ -z "$keychain_path" ]]; then
            echo "KEYCHAIN_PATH environment variable is not set" >&2
            exit 1
          fi

          provided="${PROVIDED_IDENTITY:-}"
          provided_lower="$(printf '%s' "$provided" | tr '[:upper:]' '[:lower:]')"

          identities=()

          collect_identities() {
            local target="$1"
            local output
            if [[ -n "$target" ]]; then
              echo "Attempting to resolve signing identities in $target"
              output=$(security find-identity -v -p codesigning "$target" 2>&1 || true)
            else
              echo "Attempting to resolve signing identities from the default keychain search list"
              output=$(security find-identity -v -p codesigning 2>&1 || true)
            fi
            printf '%s\n' "$output"
            while IFS= read -r line; do
              entry=$(printf '%s\n' "$line" | sed -E 's/^[[:space:]]*[0-9]+\) ([0-9A-Fa-f]+) "(.*)"$/\1|\2/')
              if [[ "$entry" == *"|"* ]]; then
                identities+=("$entry")
              fi
            done <<<"$output"
          }

          declare -a search_targets=("$keychain_path")
          if [[ "$keychain_path" == *.keychain-db ]]; then
            search_targets+=("${keychain_path%.keychain-db}.keychain")
          fi
          search_targets+=("")

          for target in "${search_targets[@]}"; do
            collect_identities "$target"
            if [[ ${#identities[@]} -gt 0 ]]; then
              break
            fi
          done

          resolved=""
          resolved_label=""

          if [[ -n "$provided" ]]; then
            for entry in "${identities[@]}"; do
              fingerprint="${entry%%|*}"
              label="${entry#*|}"
              if [[ -z "$fingerprint" ]]; then
                continue
              fi
              fp_lower="$(printf '%s' "$fingerprint" | tr '[:upper:]' '[:lower:]')"
              if [[ "$fp_lower" == "$provided_lower" ]]; then
                resolved="$fingerprint"
                resolved_label="$label"
                break
              fi
              label_lower="$(printf '%s' "$label" | tr '[:upper:]' '[:lower:]')"
              if [[ "$label_lower" == "$provided_lower" ]]; then
                resolved="$fingerprint"
                resolved_label="$label"
                break
              fi
            done

            if [[ -z "$resolved" ]]; then
              echo "Provided codesign identity not discovered in signing keychain; falling back to provided value" >&2
              resolved="$provided"
            else
              echo "Matched provided codesign identity to fingerprint $resolved"
            fi
          fi

          if [[ -z "$resolved" ]]; then
            if [[ ${#identities[@]} -eq 0 ]]; then
              echo "No signing identities available in the signing keychain or default search list" >&2
              exit 1
            fi
            IFS='|' read -r resolved resolved_label <<<"${identities[0]}"
            echo "Using first available codesign identity fingerprint $resolved"
          fi

          if [[ -z "$resolved" ]]; then
            echo "Failed to resolve a codesign identity" >&2
            exit 1
          fi

          if [[ -n "$provided" && -n "$resolved_label" ]]; then
            provided_label_lower="$(printf '%s' "$resolved_label" | tr '[:upper:]' '[:lower:]')"
            if [[ "$provided_label_lower" != "$provided_lower" && "$resolved" != "$provided" ]]; then
              echo "Provided codesign identity secret differs from resolved fingerprint; codesign will use $resolved" >&2
            fi
          fi

          if [[ -n "$resolved_label" ]]; then
            echo "Using identity label: $resolved_label"
          fi

          {
            echo "CODESIGN_IDENTITY_RESOLVED=$resolved"
            if [[ -n "$resolved_label" ]]; then
              echo "CODESIGN_IDENTITY_LABEL=$resolved_label"
            elif [[ -n "$provided" ]]; then
              echo "CODESIGN_IDENTITY_LABEL=$provided"
            fi
          } >>"$GITHUB_ENV"

      - name: Locate and rename Windows installer
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $bundleRoots = @()
          if ($env:CARGO_TARGET_DIR) {
            $bundleRoots += (Join-Path $env:CARGO_TARGET_DIR 'release\bundle')
          }
          $bundleRoots += 'dbbs-faculty-match\src-tauri\target\release\bundle'

          $installer = $null
          foreach ($root in $bundleRoots) {
            if (-not $root) { continue }
            if (-not (Test-Path $root)) { continue }

            $nsisDir = Join-Path $root 'nsis'
            if (Test-Path $nsisDir) {
              $installer = Get-ChildItem -Path $nsisDir -Filter '*.exe' -File -ErrorAction SilentlyContinue | Select-Object -First 1
            }

            if (-not $installer) {
              $installer = Get-ChildItem -Path $root -Filter '*.exe' -File -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
            }

            if ($installer) { break }
          }

          if (-not $installer) {
            throw "NSIS installer not found in bundle directories. Checked: $($bundleRoots -join ', ')"
          }
          $newName = "${{ steps.metadata.outputs.slug }}_${{ steps.metadata.outputs.version }}_${{ matrix.artifact-suffix }}.exe"
          Rename-Item -Path $installer.FullName -NewName $newName -Force


      - name: Rename macOS disk image
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          bundle_dir="dbbs-faculty-match/src-tauri/target/release/bundle/dmg"
          dmg=$(find "$bundle_dir" -maxdepth 1 -type f -name '*.dmg' | head -n 1)
          if [[ -z "$dmg" ]]; then
            echo "No DMG artifact found" >&2
            exit 1
          fi
          new_name="${{ steps.metadata.outputs.slug }}_${{ steps.metadata.outputs.version }}_${{ matrix.artifact-suffix }}.dmg"
          final_path="$(dirname "$dmg")/$new_name"
          mv "$dmg" "$final_path"
          echo "DMG_PATH=$final_path" >>"$GITHUB_ENV"

      - name: Codesign macOS disk image
        if: runner.os == 'macOS' && env.MACOS_CERT_P12 != ''
        shell: bash
        run: |
          set -euo pipefail
          dmg_path="${DMG_PATH:-}"
          if [[ -z "$dmg_path" ]]; then
            echo "DMG_PATH environment variable is not set" >&2
            exit 1
          fi
          keychain_path="${KEYCHAIN_PATH:-}"
          if [[ -z "$keychain_path" ]]; then
            echo "KEYCHAIN_PATH environment variable is not set" >&2
            exit 1
          fi
          identity="${CODESIGN_IDENTITY_RESOLVED:-}"
          if [[ -z "$identity" ]]; then
            echo "CODESIGN_IDENTITY_RESOLVED environment variable is not set" >&2
            exit 1
          fi
          echo "Signing $dmg_path with identity $identity"
          if [[ -n "${CODESIGN_IDENTITY_LABEL:-}" ]]; then
            echo "Identity label: ${CODESIGN_IDENTITY_LABEL}"
          fi
          codesign --force --timestamp --sign "$identity" --keychain "$keychain_path" "$dmg_path"
          codesign --verify --verbose "$dmg_path"

      - name: Notarize macOS disk image
        if: runner.os == 'macOS' && env.MACOS_CERT_P12 != ''
        timeout-minutes: 120
        env:
          NOTARIZE_APPLE_ID:  ${{ secrets.NOTARIZE_APPLE_ID }}
          NOTARIZE_PASSWORD:  ${{ secrets.NOTARIZE_PASSWORD }}
          NOTARIZE_TEAM_ID:   ${{ secrets.NOTARIZE_TEAM_ID }}
        shell: bash
        run: |
          set -euo pipefail
          dmg_path="${DMG_PATH:-}"
          if [[ -z "$dmg_path" ]]; then
            echo "DMG_PATH environment variable is not set" >&2
            exit 1
          fi
          xcrun notarytool store-credentials notary-profile \
            --apple-id "$NOTARIZE_APPLE_ID" \
            --team-id "$NOTARIZE_TEAM_ID" \
            --password "$NOTARIZE_PASSWORD"
          result=$(xcrun notarytool submit "$dmg_path" \
            --keychain-profile notary-profile \
            --wait --output-format json)
          status=$(echo "$result" | jq -r '.status')
          submission_id=$(echo "$result" | jq -r '.id')
          if [[ "$status" != "Accepted" ]]; then
            echo "Notarization failed: $status" >&2
            if [[ -n "$submission_id" && "$submission_id" != "null" ]]; then
              xcrun notarytool log "$submission_id" --keychain-profile notary-profile || true
            fi
            exit 1
          fi

      - name: Staple notarization ticket to DMG
        if: runner.os == 'macOS' && env.MACOS_CERT_P12 != ''
        shell: bash
        run: |
          set -euo pipefail
          dmg_path="${DMG_PATH:-}"
          if [[ -z "$dmg_path" ]]; then
            echo "DMG_PATH environment variable is not set" >&2
            exit 1
          fi
          xcrun stapler staple "$dmg_path"

      - name: Upload release artifacts
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ needs.create-release.outputs.release-tag }}
        run: |
          set -euo pipefail

          slug='${{ steps.metadata.outputs.slug }}'
          version='${{ steps.metadata.outputs.version }}'
          suffix='${{ matrix.artifact-suffix }}'

          artifact_base="${slug}_${version}_${suffix}"

          upload_artifact() {
            local path="$1"
            if [[ -z "$path" ]]; then
              echo "No artifact path provided" >&2
              exit 1
            fi

            if [[ ! -f "$path" ]]; then
              echo "Expected artifact '$path' not found" >&2
              exit 1
            fi

            local upload_path="$path"
            if [[ "${RUNNER_OS:-}" == "Windows" ]]; then
              upload_path="$(cygpath -w "$path" 2>/dev/null || echo "$path")"
            fi

            echo "Uploading $upload_path"
            gh release upload "$RELEASE_TAG" "$upload_path" --clobber
          }

          if [[ "${RUNNER_OS:-}" == "Windows" ]]; then
            declare -a candidate_dirs=()
            if [[ -n "${CARGO_TARGET_DIR:-}" ]]; then
              candidate_dirs+=("${CARGO_TARGET_DIR}/release/bundle/nsis")
            fi
            candidate_dirs+=("dbbs-faculty-match/src-tauri/target/release/bundle/nsis")

            artifact_path=""
            for dir in "${candidate_dirs[@]}"; do
              # Normalise to a POSIX-style path so bash can inspect it.
              posix_dir="$dir"
              posix_dir="$(cygpath -u "$posix_dir" 2>/dev/null || echo "$posix_dir")"
              candidate="$posix_dir/${artifact_base}.exe"
              if [[ -f "$candidate" ]]; then
                artifact_path="$candidate"
                break
              fi
            done

            if [[ -z "$artifact_path" ]]; then
              echo "Renamed Windows installer ${artifact_base}.exe not found in: ${candidate_dirs[*]}" >&2
              exit 1
            fi

            upload_artifact "$artifact_path"
          elif [[ "${RUNNER_OS:-}" == "macOS" ]]; then
            artifact_path="dbbs-faculty-match/src-tauri/target/release/bundle/dmg/${artifact_base}.dmg"
            if [[ ! -f "$artifact_path" ]]; then
              echo "Renamed macOS disk image ${artifact_base}.dmg not found in dbbs-faculty-match/src-tauri/target/release/bundle/dmg" >&2
              exit 1
            fi

            upload_artifact "$artifact_path"
          else
            echo "Unsupported runner OS: ${RUNNER_OS:-unknown}" >&2
            exit 1
          fi
