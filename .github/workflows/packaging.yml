name: Build and Release Tauri App

on:
  pull_request:
    paths:
      - 'dbbs-faculty-match/**'
      - '.github/workflows/packaging.yml'
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag to build and release'
        required: true

jobs:
  build:
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact-suffix: windows_x64
          - os: macos-13
            artifact-suffix: macos_x64
          - os: macos-latest
            artifact-suffix: macos_arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: dbbs-faculty-match/package-lock.json

      - name: Install frontend dependencies
        working-directory: dbbs-faculty-match
        run: npm ci

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Use short Cargo target dir (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $short = "D:\a\t"
          New-Item -ItemType Directory -Force -Path $short | Out-Null
          "CARGO_TARGET_DIR=$short" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "Using CARGO_TARGET_DIR=$short"

      - name: Enable .NET Framework 3.5 (WiX requirement)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          dism /online /enable-feature /featurename:NetFx3 /All

      - name: Ensure WiX is installed/up to date
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco upgrade wixtoolset -y --no-progress

      - name: Locate WiX and export TAURI_WIX_PATH
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Try common locations first
          $candidates = @(
            "$env:ProgramFiles(x86)\WiX Toolset v3.14\bin",
            "$env:ProgramFiles\WiX Toolset v3.14\bin",
            "$env:ProgramFiles(x86)\WiX Toolset v3.11\bin",
            "$env:ProgramFiles\WiX Toolset v3.11\bin"
          ) | Where-Object { Test-Path $_ }

          if (-not $candidates) {
            # Fall back: search for any "WiX Toolset v3.*\bin"
            $roots = @("C:\Program Files", "C:\Program Files (x86)")
            $found = foreach ($root in $roots) {
              if (Test-Path $root) {
                Get-ChildItem -Path $root -Directory -Filter "WiX Toolset v3.*" -ErrorAction SilentlyContinue |
                  Sort-Object Name -Descending |
                  Select-Object -First 1
              }
            } | Where-Object { $_ } | Select-Object -First 1

            if ($found) {
              $candidates = @((Join-Path $found.FullName "bin"))
            }
          }

          if (-not $candidates) {
            Write-Error "WiX installation not found."
            exit 1
          }

          $wix = $candidates[0]
          $light = Join-Path $wix "light.exe"
          if (-not (Test-Path $light)) {
            Write-Error "Found WiX folder '$wix' but light.exe not present."
            exit 1
          }

          # Prefer installed WiX over Tauri's cached copy
          "TAURI_WIX_PATH=$wix" | Out-File -FilePath $env:GITHUB_ENV -Append
          "WIX=$wix" | Out-File -FilePath $env:GITHUB_ENV -Append
          "PATH=$wix;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Verify WiX light.exe works
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Using TAURI_WIX_PATH=$env:TAURI_WIX_PATH"
          Get-Command light.exe
          & light.exe -? | Select-Object -First 1


      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: dbbs-faculty-match

  create-release:
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      release-tag: ${{ steps.release-tag.outputs.value }}
    steps:
      - name: Determine release tag
        id: release-tag
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == 'workflow_dispatch' ]]; then
            echo "value=${{ inputs.tag_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "value=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub release
        id: create-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ steps.release-tag.outputs.value }}
        shell: bash
        run: |
          set -euo pipefail

          repo="${{ github.repository }}"
          release_tag="${RELEASE_TAG}"
          release_name="DDBS Reviewer Recommendations v${release_tag}"
          payload=$(jq -n \
            --arg tag "$release_tag" \
            --arg name "$release_name" \
            --arg target "${{ github.sha }}" \
            '{tag_name:$tag, name:$name, target_commitish:$target, draft:false, prerelease:false, body:""}')

          response_file=$(mktemp)
          if gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              "repos/${repo}/releases" \
              --input - \
              >"$response_file" <<<"$payload"; then
            :
          else
            if gh api \
                -H "Accept: application/vnd.github+json" \
                "repos/${repo}/releases/tags/${release_tag}" \
                >"$response_file"; then
              :
            else
              echo "Failed to create or retrieve release for tag ${release_tag}" >&2
              cat "$response_file" >&2 || true
              exit 1
            fi
          fi

          release_id=$(jq -r '.id // empty' "$response_file")
          if [[ -z "$release_id" ]]; then
            echo "Could not determine release id" >&2
            cat "$response_file" >&2 || true
            exit 1
          fi

          rm -f "$response_file"

          echo "id=$release_id" >> "$GITHUB_OUTPUT"

  release:
    needs: create-release
    if: needs.create-release.result == 'success'
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact-suffix: windows_x64
          - os: macos-13
            artifact-suffix: macos_x64
          - os: macos-latest
            artifact-suffix: macos_arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: dbbs-faculty-match/package-lock.json

      - name: Install frontend dependencies
        working-directory: dbbs-faculty-match
        run: npm ci
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Read app metadata
        id: metadata
        shell: bash
        working-directory: dbbs-faculty-match
        run: |
          set -euo pipefail
          slug=$(jq -r '.name' package.json)
          version=$(jq -r '.version' src-tauri/tauri.conf.json)
          echo "slug=${slug}" >>"$GITHUB_OUTPUT"
          echo "version=${version}" >>"$GITHUB_OUTPUT"

      - name: Use short Cargo target dir (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $short = "D:\a\t"
          New-Item -ItemType Directory -Force -Path $short | Out-Null
          "CARGO_TARGET_DIR=$short" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "Using CARGO_TARGET_DIR=$short"

      - name: Enable .NET Framework 3.5 (WiX requirement)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          dism /online /enable-feature /featurename:NetFx3 /All

      - name: Ensure WiX is installed/up to date
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco upgrade wixtoolset -y --no-progress

      - name: Locate WiX and export TAURI_WIX_PATH
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Try common locations first
          $candidates = @(
            "$env:ProgramFiles(x86)\WiX Toolset v3.14\bin",
            "$env:ProgramFiles\WiX Toolset v3.14\bin",
            "$env:ProgramFiles(x86)\WiX Toolset v3.11\bin",
            "$env:ProgramFiles\WiX Toolset v3.11\bin"
          ) | Where-Object { Test-Path $_ }

          if (-not $candidates) {
            # Fall back: search for any "WiX Toolset v3.*\bin"
            $roots = @("C:\Program Files", "C:\Program Files (x86)")
            $found = foreach ($root in $roots) {
              if (Test-Path $root) {
                Get-ChildItem -Path $root -Directory -Filter "WiX Toolset v3.*" -ErrorAction SilentlyContinue |
                  Sort-Object Name -Descending |
                  Select-Object -First 1
              }
            } | Where-Object { $_ } | Select-Object -First 1

            if ($found) {
              $candidates = @((Join-Path $found.FullName "bin"))
            }
          }

          if (-not $candidates) {
            Write-Error "WiX installation not found."
            exit 1
          }

          $wix = $candidates[0]
          $light = Join-Path $wix "light.exe"
          if (-not (Test-Path $light)) {
            Write-Error "Found WiX folder '$wix' but light.exe not present."
            exit 1
          }

          # Prefer installed WiX over Tauri's cached copy
          "TAURI_WIX_PATH=$wix" | Out-File -FilePath $env:GITHUB_ENV -Append
          "WIX=$wix" | Out-File -FilePath $env:GITHUB_ENV -Append
          "PATH=$wix;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Verify WiX light.exe works
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Using TAURI_WIX_PATH=$env:TAURI_WIX_PATH"
          Get-Command light.exe
          & light.exe -? | Select-Object -First 1

      - name: Build Tauri application
        working-directory: dbbs-faculty-match
        run: npm exec -- tauri build --ci
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PRIVATE_KEY_PASSWORD }}

      - name: Rename Windows installer
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $bundleDir = if ($env:CARGO_TARGET_DIR) { Join-Path $env:CARGO_TARGET_DIR 'release\bundle\msi' } else { 'dbbs-faculty-match\src-tauri\target\release\bundle\msi' }
          if (-not (Test-Path $bundleDir)) { throw "Bundle directory not found: $bundleDir" }
          $msi = Get-ChildItem -Path $bundleDir -Filter '*.msi' | Select-Object -First 1
          if (-not $msi) { throw "MSI artifact not found in $bundleDir" }
          $newName = "${{ steps.metadata.outputs.slug }}_${{ steps.metadata.outputs.version }}_${{ matrix.artifact-suffix }}.msi"
          Rename-Item -Path $msi.FullName -NewName $newName -Force


      - name: Rename macOS disk image
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          bundle_dir="dbbs-faculty-match/src-tauri/target/release/bundle/dmg"
          dmg=$(find "$bundle_dir" -maxdepth 1 -type f -name '*.dmg' | head -n 1)
          if [[ -z "$dmg" ]]; then
            echo "No DMG artifact found" >&2
            exit 1
          fi
          new_name="${{ steps.metadata.outputs.slug }}_${{ steps.metadata.outputs.version }}_${{ matrix.artifact-suffix }}.dmg"
          mv "$dmg" "$(dirname "$dmg")/$new_name"

      - name: Upload release artifacts
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ needs.create-release.outputs.release-tag }}
        run: |
          set -euo pipefail
          base_dir="dbbs-faculty-match/src-tauri/target/release/bundle"
          if [[ ! -d "$base_dir" ]]; then
            echo "Bundle directory not found: $base_dir" >&2
            exit 1
          fi
          while IFS= read -r -d '' file; do
            echo "Uploading $file"
            gh release upload "$RELEASE_TAG" "$file" --clobber
          done < <(find "$base_dir" -type f \( -name '*.msi' -o -name '*.exe' -o -name '*.zip' -o -name '*.dmg' -o -name '*.pkg' -o -name '*.app' -o -name '*.tar.gz' -o -name '*.msix' -o -name '*.json' \) -print0)
