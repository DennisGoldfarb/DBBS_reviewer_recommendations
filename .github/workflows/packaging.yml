name: Build and Release Tauri App

on:
  pull_request:
    paths:
      - 'tauri-gui/**'
      - '.github/workflows/packaging.yml'
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag to build and release'
        required: true

jobs:
  build:
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        platform: [windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: tauri-gui/package-lock.json

      - name: Install frontend dependencies
        working-directory: tauri-gui
        run: npm ci

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: tauri-gui

  create-release:
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      release-tag: ${{ steps.release-tag.outputs.value }}
    steps:
      - name: Determine release tag
        id: release-tag
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == 'workflow_dispatch' ]]; then
            echo "value=${{ inputs.tag_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "value=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub release
        id: create-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ steps.release-tag.outputs.value }}
        shell: bash
        run: |
          set -euo pipefail

          repo="${{ github.repository }}"
          release_tag="${RELEASE_TAG}"
          release_name="DDBS Reviewer Recommendations v${release_tag}"
          payload=$(jq -n \
            --arg tag "$release_tag" \
            --arg name "$release_name" \
            --arg target "${{ github.sha }}" \
            '{tag_name:$tag, name:$name, target_commitish:$target, draft:false, prerelease:false, body:""}')

          response_file=$(mktemp)
          if gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              "repos/${repo}/releases" \
              --input - \
              >"$response_file" <<<"$payload"; then
            :
          else
            if gh api \
                -H "Accept: application/vnd.github+json" \
                "repos/${repo}/releases/tags/${release_tag}" \
                >"$response_file"; then
              :
            else
              echo "Failed to create or retrieve release for tag ${release_tag}" >&2
              cat "$response_file" >&2 || true
              exit 1
            fi
          fi

          release_id=$(jq -r '.id // empty' "$response_file")
          if [[ -z "$release_id" ]]; then
            echo "Could not determine release id" >&2
            cat "$response_file" >&2 || true
            exit 1
          fi

          rm -f "$response_file"

          echo "id=$release_id" >> "$GITHUB_OUTPUT"

  release:
    needs: create-release
    if: needs.create-release.result == 'success'
    strategy:
      matrix:
        platform: [windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: tauri-gui/package-lock.json

      - name: Install frontend dependencies
        working-directory: tauri-gui
        run: npm ci

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build and upload release artifacts
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PRIVATE_KEY_PASSWORD }}
        with:
          projectPath: tauri-gui
          releaseId: ${{ needs.create-release.outputs.release-id }}
